<?xml version='1.0' encoding='UTF-8'?>
<!--
  JBoss, Home of Professional Open Source
  Copyright 2010, Red Hat Middleware LLC, and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
--><!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="solder-elextensions">
  <title>Evaluating Unified EL</title>
  <para>
      Solder provides a method to evaluate EL that is not dependent on JSF or JSP, a facility sadly missing in
      Java EE. To use it inject <code>Expressions</code> into your bean. You can evaluate value expressions, or method
      expressions. The Solder API provides type inference for you. For example:
   </para>
  <programlisting role="JAVA">class FruitBowl {
   
   @Inject Expressions expressions;
  
   public void run() {
      String fruitName = expressions.evaluateValueExpression(&quot;#{fruitBowl.fruitName}&quot;);
      Apple fruit = expressions.evaluateMethodExpression(&quot;#{fruitBown.getFruit}&quot;);
   }
}</programlisting>

  <!-- TODO:  There are many more qualifiers available in impl, which IMO should probably be pulled out
              and put into api, and documented here to help create composite EL resolvers
  -->
  <section id="solder-elextensions.resolver">
    <title>@Resolver</title>

    <para>
      Solder also contains a qualifier to ease registration of <literal>javax.el.ELResolver</literal> instances.
      The <literal>@Resolver</literal> will register any <literal>javax.el.ELResolver</literal> annotated with
      <literal>@Resolver</literal> with the application wide <literal>javax.el.ELResolver</literal>.
    </para>
  </section>
</chapter>
