<?xml version="1.0" encoding="UTF-8"?>
<!--

    JBoss, Home of Professional Open Source

    Copyright 2011, Red Hat, Inc., and individual contributors
    by the @authors tag. See the copyright.txt in the distribution for a
    full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="validation-method-validation">
  <title>Method Validation</title>

  <para>Hibernate Validator provides several advanced validation features and
  related functionality which go beyond what is defined by JSR 303 ("Bean
  Validation API"). One of these additional features is a facility for the
  validation of method parameters and return values. With that API a style of
  program design known as "Programming by Contract" can be implemented using
  the concepts defined by the Bean Validation API.</para>

  <para>This means that any Bean Validation constraints can be used to
  describe</para>

  <itemizedlist>
    <listitem>
      <para>any preconditions that must be met before a method may legally be
      invoked (by annotating method parameters with constraints) and</para>
    </listitem>

    <listitem>
      <para>any postconditions that are guaranteed after a method invocation
      returns (by annotating methods)</para>
    </listitem>
  </itemizedlist>

  <para>To give an example listing <xref
  linkend="example-service-with-constraints" /> shows a fictional repository
  class which retrieves customer objects for a given name. Constraint
  annotations are used here to express the following
  pre-/postconditions:</para>

  <itemizedlist>
    <listitem>
      <para>The value for the name parameter may not be null and must be at
      least three characters long</para>
    </listitem>

    <listitem>
      <para>The method may never return null and each Customer object
      contained in the returned set is valid with respect to all constraints
      it hosts</para>
    </listitem>
  </itemizedlist>

  <example id="example-service-with-constraints">
    <title>Exemplary repository with constraint annotations</title>

    <programlisting language="JAVA" role="JAVA">@AutoValidating
public class CustomerRepository {

    @NotNull @Valid Set&lt;Customer&gt; findCustomersByName(@NotNull @Size(min=3) String name);

}</programlisting>
  </example>

  <para>Hibernate Validator itself provides only an API for validating method
  parameters and return values, but it does not trigger this validation
  itself.</para>

  <para>This is where Seam Validation comes into play. Seam Validation
  provides a so called business method interceptor which intercepts client
  invocations of a method and performs a validation of the method arguments
  before as well as a validation of the return value after the actual method
  invocation.</para>

  <para>To control for which types such a validation shall be performed, Seam
  Validation provides an interceptor binding,
  <classname>@AutoValidating</classname>. If this annotation is declared on a
  given type an automatic validation of each invocation of any this type's
  methods will be performed.</para>

  <para>If either during the parameter or the return value validation at least
  one constraint violation is detected (e.g. because
  <methodname>findCustomersByName()</methodname> from listing <xref
  linkend="example-service-with-constraints" /> was invoked with a String only
  two characters long), a
  <classname>MethodConstraintViolationException</classname> is thrown. That
  way it is ensured that all parameter constraints are fulfilled when the call
  flow comes to the method implementation (so it is not necessary to perform
  any parameter null checks manually for instance) and all return value
  constraints are fulfilled when the call flow returns to the caller of the
  method.</para>

  <para>The exception thrown by Seam Validation (which would typically be
  written to a log file) gives a clear overview what went wrong during method
  invocation:</para>

  <example id="example-methodconstraintviolationexception">
    <title>Output of MethodConstraintViolationException</title>

    <programlisting>org.hibernate.validator.MethodConstraintViolationException: 1 constraint violation(s) occurred during method invocation.
Method: public java.lang.Set com.mycompany.service.CustomerRepository.findCustomersByName(java.lang.String)
Argument values: [B]
Constraint violations: 
  (1) Kind: PARAMETER
      parameter index: 0
      message: size must be between 3 and 2147483647
      root bean: com.mycompany.service.org$jboss$weld$bean-flat-ManagedBean-class_com$mycompany$service$$CustomerRepository_$$_WeldSubclass@3f72c47b
      property path: CustomerRepository#findCustomersByName(arg0)
      constraint: @javax.validation.constraints.Size(message={javax.validation.constraints.Size.message}, min=3, max=2147483647, payload=[], groups=[])</programlisting>
  </example>

  <para>To make use of Seam Validation's validation interceptor it has to be
  registered in your component's beans.xml descriptor as shown in listing
  <xref linkend="example-beans-xml" />:</para>

  <example id="example-beans-xml">
    <title>Registering the validation interceptor in beans.xml</title>

    <programlisting role="XML">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd"&gt;

   &lt;interceptors&gt;
      &lt;class&gt;org.jboss.seam.validation.ValidationInterceptor&lt;/class&gt;
   &lt;/interceptors&gt;
&lt;/beans&gt;</programlisting>
  </example>

  <para>It is recommended that you consult the Hibernate Validator <ulink
  url="http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html/">reference
  guide</ulink> to learn more about the method validation feature in general
  or for instance the rules that apply for constraining methods in inheritance
  hierarchies in particular.</para>
</chapter>
