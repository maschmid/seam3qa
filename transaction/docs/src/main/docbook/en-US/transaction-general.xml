<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="transaction">
    <title>Seam Transaction Reference</title>

    <section>
        <title>Introduction</title>

        <para>
            Unlike EJB session beans CDI beans are not transactional by default. Seam Transaction
            brings declarative transaction management to CDI beans by enabling them to
            use <code>@TransactionAttribute</code>. Seam also provides the <code>@Transactional</code>
            annotation, for environments where java EE APIs are not present.
        </para>

    </section>
    
    <section id="transaction.management">
        <title>Transaction Management</title>
        
        <section>
            <title>Configuration</title>
            <para>
                In order to enable declarative transaction management for managed beans
                you need to list the transaction interceptor in beans.xml:
            </para>
            <programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="
      http://java.sun.com/xml/ns/javaee
      http://docs.jboss.org/cdi/beans_1_0.xsd">
   <interceptors>
      <class>org.jboss.seam.transaction.TransactionInterceptor</class>
   </interceptors>
</beans>]]></programlisting>
            <para>
                If you are in a Java EE 6 environment then you are good to go,
                no additional configuration is required.
            </para>
            <note>
            	<para>
	            	If you are deploying to JBoss AS6 it is important to know that it does not support meta
	            	data per bean archive and will throw a deployment error if defined twice. Additionally	           	
	           		some Seam 3 modules such as Security already enable this Interceptor and defining it
	           		again will result in a deployment error.
	           	</para>
	            <para>   		
	           		This is not an issue with JBoss AS7 or Glassfish.
	           	</para>
           	</note>
            <para>
                If you are not in an EE environment you may need to configure some
                things with Solder. You may need the following entries in your
                <literal>beans.xml</literal> file:
            </para>
            <programlisting role="XML"><![CDATA[<beans xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:s="urn:java:ee"
   xmlns:t="urn:java:org.jboss.seam.transaction"
   xsi:schemaLocation="
      http://java.sun.com/xml/ns/javaee
      http://docs.jboss.org/cdi/beans_1_0.xsd">

      <t:SeSynchronizations>
         <s:modifies/>
      </t:SeSynchronizations>

      <t:EntityTransaction>
         <s:modifies />
      </t:EntityTransaction>

</beans>]]></programlisting>

            <para>
                Let's look at these individually.
            </para>

            <programlisting role="XML"><![CDATA[<t:SeSynchronizations>
  <s:modifies/>
</t:SeSynchronizations>]]></programlisting>

            <para>
                Seam will attempt to use JTA synchronizations if possible. If not then you need to install the
                <code>SeSynchronzations</code> bean to allow seam to handle synchronizations manually.
                Synchronizations allow Seam to respond to transaction events such as
                <literal>beforeCompletion()</literal> and <literal>afterCompletion()</literal>, and are needed
                for the proper operation of the Seam Managed Persistence Context.
            </para>

            <programlisting role="XML"><![CDATA[<t:EntityTransaction>
   <s:modifies />
</t:EntityTransaction>]]></programlisting>

            <para>
                By default Seam will attempt to look up <literal>java:comp/UserTransaction</literal>
                from JNDI (or alternatively retrieve it from the <code>EJBContext</code>
                if a container managed transaction is active). Installing <code>EntityTransaction</code>
                tells Seam to use the JPA <code>EntityTransaction</code> instead. To use this you must have a
                Seam Managed Persistence Context (see the Seam Persistence documentation for details)
                installed with qualifier<code>@Default</code>.
            </para>
            
            <para>
                If your entity manager is installed with a different qualifier, then you need to use the following
                configuration (this assumes that <literal>my</literal>
                has been bound to the namespace that contains
                the appropriate qualifier, see the Solder documentation for more details):
            </para>
            
            <programlisting role="XML"><![CDATA[<t:EntityTransaction>
   <s:modifies />
   <t:entityManager>
      <my:SomeQualifier/>
   </t:entityManager>
</t:EntityTransaction>]]></programlisting>

            <note>
                <para>
                    You should avoid <code>EntityTransaction</code> if you have more than one persistence unit in your
                    application. Seam does not support installing multiple <code>EntityTransaction</code>
                    beans, and the <code>EntityTransaction</code> interface does not support two phase commit, 
                    so unless you are careful you may have data consistency issues. If you need multiple persistence 
                    units in your application then we highly recommend using an EE 6 compatible server, such as JBoss AS7.
                </para>
            </note>

        </section>

        <section>
            <title>Declarative Transaction Management</title>

            <para>
                Seam adds declarative transaction support to managed beans. Seam re-uses the EJB
                <code>@TransactionAttribute</code>
                for this purpose, however it also provides an alternative
                <code>@Transactional</code>
                annotation for environments where
                the EJB API's are not available. An alternative to<code>@ApplicationException</code>,
                <code>@SeamApplicationException</code>
                is also provided. Unlike EJBs, managed beans
                are not transactional by default, you can change this by adding the
                <code>@TransactionAttribute</code>
                to the bean class.
            </para>

            <para>
                Unlike in Seam 2, transactions will not roll back whenever a non-application exception
                propagates out of a bean, unless the bean has the transaction interceptor enabled.
            </para>

            <para>
                If you are using seam managed transactions as part of the seam-faces module you do not
                need to worry about declarative transaction management. Seam will automatically start
                a transaction for you at the start of the faces request, and commit it before the
                render response phase.
            </para>

            <warning>
                <para>
                    <code>@SeamApplicationException</code>
                    will not control transaction rollback
                    when using EJB container managed transactions. If you are in an EE environment
                    then you should always use the EJB API's, namely
                    <code>@TransactionAttribute</code>
                    and<code>@ApplicationException</code>.
                </para>
            </warning>

            <note>
                <para>
                    <code>TransactionAttributeType.REQUIRES_NEW</code>
                    and
                    <code>TransactionAttributeType.NOT_SUPPORTED</code>
                    are not yet supported on managed
                    beans.
                </para>
            </note>

            <para>
                Let's have a look at some code. Annotations applied at a method level override annotations
                applied at the class level.
            </para>
            <programlisting role="JAVA">@TransactionAttribute /*Defaults to TransactionAttributeType.REQUIRED */
                class TransactionalBean
                {

                /* This is a transactional method, when this method is called a transaction
                * will be started if one does not already exist.
                * This behavior is inherited from the @TransactionAttribute annotation on
                * the class.
                */
                void doWork()
                {
                ...
                }

                /* A transaction will not be started for this method, however it */
                /* will not complain if there is an existing transaction active. */
                @TransactionAttributeType(TransactionAttributeType.SUPPORTED)
                void doMoreWork()
                {
                ...
                }

                /* This method will throw an exception if there is no transaction active when */
                /* it is invoked. */

                @TransactionAttributeType(TransactionAttributeType.MANDATORY)
                void doEvenMoreWork()
                {
                ...
                }

                /* This method will throw an exception if there is a transaction active when */
                /* it is invoked. */
                @TransactionAttributeType(TransactionAttributeType.NOT_SUPPORTED)
                void doOtherWork()
                {
                ...
                }
                }
            </programlisting>
        </section>

        <section id="transaction.requestListener">
          <title>ServletRequestListener</title>

          <para>
            Seam Transaction has a built in <literal>ServletRequestListener</literal> which automatically begins and
            commits (or rolls back if the transaction is set to rollback) a transaction for each request! This should
            end having to manually specify transactions, or wonder if a transaction is inplace.
          </para>

          <tip>
            <para>
              Should the need arise for disabling this listener, a context param in web.xml named 
              <literal>org.jboss.seam.transaction.disableListener</literal> set to <literal>true</literal> will
              disable the listener.
            </para>
          </tip>
        </section>

    </section> 

</chapter>
